"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.enable = exports.azureCoreTracing = exports.AzureMonitorSymbol = void 0;
var diagnostic_channel_1 = require("diagnostic-channel");
exports.AzureMonitorSymbol = "Azure_Monitor_Tracer";
var isPatched = false;
/**
 * By default, @azure/core-tracing default tracer is a NoopTracer.
 * This patching changes the default tracer to a patched BasicTracer
 * which emits ended spans as diag-channel events.
 *
 * The @opentelemetry/tracing package must be installed to use these patches
 * https://www.npmjs.com/package/@opentelemetry/tracing
 * @param coreTracing
 */
var azureCoreTracingPatchFunction = function (coreTracing) {
    if (isPatched) {
        // tracer is already cached -- noop
        return coreTracing;
    }
    try {
        var tracing = require("@opentelemetry/tracing");
        var api = require("@opentelemetry/api");
        var provider = new tracing.BasicTracerProvider();
        var defaultTracer = provider.getTracer("applicationinsights tracer");
        // Patch Azure SDK setTracer
        var setTracerOriginal_1 = coreTracing.setTracer;
        coreTracing.setTracer = function (tracer) {
            // Patch startSpan instead of using spanProcessor.onStart because parentSpan must be
            // set while the span is constructed
            var startSpanOriginal = tracer.startSpan;
            tracer.startSpan = function (name, options, context) {
                var span = startSpanOriginal.call(this, name, options, context);
                var originalEnd = span.end;
                span.end = function () {
                    var result = originalEnd.apply(this, arguments);
                    diagnostic_channel_1.channel.publish("azure-coretracing", span);
                    return result;
                };
                return span;
            };
            tracer[exports.AzureMonitorSymbol] = true;
            setTracerOriginal_1.call(this, tracer);
        };
        api.trace.getSpan(api.context.active()); // seed OpenTelemetryScopeManagerWrapper with "active" symbol
        coreTracing.setTracer(defaultTracer);
        isPatched = true;
    }
    catch (e) { /* squash errors */ }
    return coreTracing;
};
exports.azureCoreTracing = {
    versionSpecifier: ">= 1.0.0 < 2.0.0",
    patch: azureCoreTracingPatchFunction,
};
function enable() {
    diagnostic_channel_1.channel.registerMonkeyPatch("@azure/core-tracing", exports.azureCoreTracing);
}
exports.enable = enable;
//# sourceMappingURL=azure-coretracing.pub.js.map